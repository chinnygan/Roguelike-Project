import java.io.Console;
import java.io.IOException;
import java.util.Scanner;

// due to the way eclipse is designed there's no way to code clearing the console into the program, 
// but this could be used as a starting point for a movement/grid generation system

public class Inputtest {
	
	public static boolean insightradius(int tileX, int tileY, int PlayerX, int PlayerY, int Playersight) {
		if ((Math.abs(PlayerX-tileX) <= Playersight) && Math.abs(PlayerY - tileY) <= Playersight) {
			return true;
		} else {
			return false;
		}
	}
	
	public static boolean validmovement(int Player, int limit) {
		if ((Player > 0) && (Player < (limit - 1))) {
			return true;
		} else {
			return false;
		} 
	}
			
	public static void main(String[] args) {
		
		int Xlength = 50, Ylength = 50;
		Character[][] Pixel = new Character[Xlength][Ylength];
		Character[][] VPixel = new Character[Xlength][Ylength];
		int PlayerX = (int)Math.ceil((Math.random() * 50) - 1);
		int PlayerY = (int)Math.ceil((Math.random() * 50) - 1);
		int x, y, Playersight = 5;
		
		Scanner input = new Scanner(System.in);
		
		for ( y = 0; y < Ylength; y++) {
			for (x = 0; x < Xlength; x++) {
				Pixel[y][x] = '~';
				if (insightradius(x,y,PlayerX,PlayerY,Playersight)) {
					VPixel[y][x] = Pixel[y][x];
					VPixel[PlayerY][PlayerX] = '@';
				}
				if (VPixel[y][x] == null) {
					VPixel[y][x] = ' ';
				}
			}
		}
		
		VPixel[PlayerY][PlayerX] = '@';
		
		for ( y = 0; y < Ylength; y++) {
			for (x = 0; x < Xlength; x++) {
				System.out.print(VPixel[y][x]);
			}
			System.out.println();
		}
		
		String Movement = input.next();
		
		do {
			
			
			switch (Movement) {
				case "Up":
					if (validmovement(PlayerY,Ylength)) {
						PlayerY--;
					}
					break;
				case "Left":
					if (validmovement(PlayerX,Xlength)) {
						PlayerX--;
					}
					break;
				case "Right":
					if (validmovement(PlayerX,Xlength)) {
						PlayerX++;
					}
					break;
				case "Down":
					if (validmovement(PlayerY,Ylength)) {
						PlayerY++;
					}
					break;
				default:
					break;
			}
											
			for ( y = 0; y < Ylength; y++) {
				for (x = 0; x < Xlength; x++) {
					if (insightradius(x,y,PlayerX,PlayerY,Playersight)) {
						VPixel[y][x] = Pixel[y][x];
						VPixel[PlayerY][PlayerX] = '@';
					}
					if (VPixel[y][x] == null) {
						VPixel[y][x] = ' ';
					}
					
						System.out.print(VPixel[y][x]);
			}
				
			System.out.println();
			}
			
			Movement = input.next();
		} while (Movement != "End"); 
		

		
	}
}
